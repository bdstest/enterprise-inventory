services:
  # PostgreSQL Database - Production Configuration
  postgres:
    image: postgres:15-alpine
    container_name: inventory_postgres
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-inventory_local}
      POSTGRES_USER: ${POSTGRES_USER:-inventory_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - inventory_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=mod
      -c log_destination=stderr
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c seq_page_cost=1
      -c effective_io_concurrency=200

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: inventory_redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - inventory_network
    command: redis-server --requirepass ${REDIS_PASSWORD} --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_app
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-inventory_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-inventory_local}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - CORS_ORIGINS=${CORS_ORIGINS:-["http://localhost:27000","http://localhost:8000","http://127.0.0.1:27000"]}
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads:Z
    networks:
      - inventory_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # HAProxy Load Balancer - Production Traffic Management (Optional)
  # Uncomment for high-traffic production deployments
  # haproxy:
  #   image: haproxy:2.8-alpine
  #   container_name: inventory_haproxy
  #   restart: unless-stopped
  #   security_opt:
  #     - no-new-privileges:true
  #   ports:
  #     - "80:80"
  #     - "8404:8404"  # Stats interface
  #   volumes:
  #     - ./haproxy_simple.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
  #   networks:
  #     - inventory_network
  #   depends_on:
  #     - app
  #   healthcheck:
  #     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

  # Prometheus Monitoring (Optional)
  # Uncomment for production monitoring
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: inventory_prometheus
  #   restart: unless-stopped
  #   security_opt:
  #     - no-new-privileges:true
  #   ports:
  #     - "27002:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   networks:
  #     - inventory_network
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'

  # Grafana Dashboard (Optional)
  # Uncomment for production monitoring
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: inventory_grafana
  #   restart: unless-stopped
  #   security_opt:
  #     - no-new-privileges:true
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
  #     GF_USERS_ALLOW_SIGN_UP: "false"
  #     GF_SERVER_HTTP_PORT: 3000
  #     GF_SERVER_ROOT_URL: "http://localhost:27001"
  #   ports:
  #     - "27001:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - inventory_network
  #   depends_on:
  #     - prometheus

networks:
  inventory_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: