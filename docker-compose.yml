services:
  # PostgreSQL Database - Production Configuration
  postgres:
    image: postgres:15-alpine
    container_name: inventory_postgres
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      POSTGRES_DB: inventory_local
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: yNM5f1wSpSPltwlH5XXp7h5oq
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./data/postgres:/var/lib/postgresql/data:Z
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - inventory_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=all
      -c log_destination=stderr
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: inventory_redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      REDIS_PASSWORD: e0C4ClnGm9CZaRfJWzzB
    volumes:
      - ./data/redis:/data:Z
    ports:
      - "6379:6379"
    networks:
      - inventory_network
    command: redis-server --requirepass e0C4ClnGm9CZaRfJWzzB --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory_app
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://inventory_user:yNM5f1wSpSPltwlH5XXp7h5oq@postgres:5432/inventory_local
      - REDIS_URL=redis://:e0C4ClnGm9CZaRfJWzzB@redis:6379/0
      - SECRET_KEY=d4f221c55abffb5326ea761398cf670a872f351c8302143578ddb0ec9fb51b71
      - JWT_SECRET_KEY=e4f6fbb7816ea71881ad4e312b96029e9059dc0cbf63ed6beaef1f641dd1d9e9c684b4d00b1c8e8dfd450583c4357b9199db8366ab2ef451013dc987e3eec788
      - JWT_ALGORITHM=HS256
      - CORS_ORIGINS=["http://localhost:27000","http://localhost:8000","http://127.0.0.1:27000"]
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads:Z
    networks:
      - inventory_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # HAProxy Load Balancer - Production Traffic Management
  haproxy:
    image: haproxy:2.8-alpine
    container_name: inventory_haproxy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"
      - "8404:8404"  # Stats interface
    volumes:
      - ./haproxy_simple.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - inventory_network
    depends_on:
      - app
      - grafana
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: inventory_prometheus
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "27002:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus:/prometheus:Z
    networks:
      - inventory_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: inventory_grafana
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      GF_SECURITY_ADMIN_PASSWORD: 9hmThEeZRorL
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_HTTP_PORT: 3000
      GF_SERVER_ROOT_URL: "http://localhost:27001"
    ports:
      - "27001:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana:Z
    networks:
      - inventory_network
    depends_on:
      - prometheus

networks:
  inventory_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16